@startuml OnlineTradeSystem_Component
!include ../_c4/C4_Component.puml

title Component Diagram: "Система Онлайн-торговли с внутренними компонентами"

' Внешние акторы и системы
Person(Customer, "Покупатель", "Оформляет заказы и осуществляет оплату")
System_Ext(PaymentGateway, "Платежный шлюз", "Обработка и проверка платежей")
System_Ext(InventoryService, "Сервис Складского Учета", "Проверка наличия товаров и резервирование")
System_Ext(NotificationService, "Сервис уведомлений", "Отправка Email/SMS")

Enterprise_Boundary(online_trading_system, "Online Trading System") {

    Boundary(OrderService, "Сервис Заказов", "Spring Boot") {
        Component(order_api, "Order API", "REST API", "Приём и обработка запросов на создание заказов")
        Component(order_processor, "Order Processor", "Core Logic", "Обработка заказов и резервирование")
        Component(payment_client, "Payment Client", "gRPC Client", "Взаимодействие с Сервисом Платежей")
        Component(inventory_client, "Inventory Client", "gRPC Client", "Взаимодействие с Складским сервисом")
        ComponentDb(order_db, "Order Database", "PostgreSQL", "Хранение данных заказов")

        Rel(order_api, order_processor, "Создание и обработка заказов")
        Rel(order_processor, payment_client, "Инициация платежа", "gRPC")
        Rel(order_processor, inventory_client, "Резервирование товара", "gRPC")
        Rel(order_processor, order_db, "Сохранение заказа в БД")
    }

    Boundary(PaymentService, "Сервис Платежей", "Spring Boot") {
        Component(payment_api, "Payment API", "REST/gRPC API", "Приём запросов на проведение платежей")
        Component(payment_processor, "Payment Processor", "Core Logic", "Логика обработки платежей")
        Component(gateway_adapter, "Payment Gateway Adapter", "Adapter", "Интеграция с Платежным шлюзом")
        ComponentDb(payment_db, "Payment Database", "PostgreSQL", "Хранение данных о транзакциях")

        Rel(payment_api, payment_processor, "Обработка платежей")
        Rel(payment_processor, gateway_adapter, "Отправка запроса на шлюз", "HTTPS")
        Rel(payment_processor, payment_db, "Сохранение результатов транзакции")
        Rel(gateway_adapter, PaymentGateway, "Запросы на оплату и проверки", "HTTPS")
    }

    Container(InternalNotificationService, "Сервис Уведомлений", "Spring Boot", "Отправка внутренних уведомлений")
}

' Взаимодействие с пользователем
Rel(Customer, order_api, "Создание заказа", "HTTPS/REST")

' Взаимодействие с PaymentService
Rel(payment_client, payment_api, "Запрос на проведение платежа", "gRPC")

' Взаимодействие внутри PaymentService
Rel(payment_processor, gateway_adapter, "Запрос в платёжный шлюз", "HTTPS")
Rel(payment_processor, payment_db, "Сохранение результатов платежа", "SQL")

' Взаимодействие с внешними системами
Rel(gateway_adapter, PaymentGateway, "Обработка платежей", "HTTPS")
Rel(inventory_client, InventoryService, "Резервирование товара", "gRPC")
Rel(order_processor, InternalNotificationService, "Уведомление о заказе", "Kafka")

@enduml
