@startuml
!include ../_c4/C4_Component.puml

title Диаграмма Компонентов системы умного дома

!unquoted procedure Rel_Write($from, $to, $label, $techn="", $descr="", $sprite="", $tags="", $link="")
$getRel("--[#green]>>", $from, $to, $label, $techn, $descr, $sprite, $tags, $link)
!endprocedure

!unquoted procedure Rel_Read($from, $to, $label, $techn="", $descr="", $sprite="", $tags="", $link="")
$getRel("<<--[#blue]", $from, $to, $label, $techn, $descr, $sprite, $tags, $link)
!endprocedure

Person(user, "Пользователь", "Управляет умным домом через веб интерфейс")
System_Ext(sensor, "Оборудование Умного Дома", "Отправляет данные телеметрии и принимает команды")

Enterprise_Boundary(smart-house_company,"Smart House Company") {
    Boundary(smart-house_service,"Smart-House Service") {
        Container(api_gateway, "API Gateway", "Единая точка входа для всех запросов")

        Container_Boundary(device_service, "Device Management Service", "Управление устройствами: регистрация, команды, статус") {
            Component(dm_api, "Device Manager API", "Предоставление REST API для управления устройствами")
            Component(dm_service, "Device Manager Service", "Управление устройствами")
            ComponentDb(dm_db, "Device Manager Database", "База данных")

            Rel(dm_api, dm_service, "Запросы выполнения команд")
            Rel(dm_service, dm_db, "Управление данными об устройствах")

        }

        Container_Boundary(telemetry_service, "Telemetry and Monitoring Service", "Прием данных телеметрии через Kafka, хранение, мониторинг") {
            Component(telemetry_api, "Telemetry API", "Предоставление REST API для телеметрии")
            Component(telemetry_consumer, "Kafka Consumer", "Обработка телеметрических данных из Kafka")
            ComponentDb(telemetry_db, "Telemetry Database", "База данных для телеметрии")

            Rel(telemetry_consumer, telemetry_db, "Сохранение данных в базу")
            Rel(telemetry_api, telemetry_db, "Чтение данных телеметрии для предоставления через API")
        }

        Container(automation_service, "Automation Service", "Создание и выполнение сценариев автоматизации")

        Container_Boundary(devices_connector, "Devices Connector", "") {
            Component(device_telemetry_collector, "Device Telemetry Collector", "Получение телеметрии от устройств через протоколы и отправка в Kafka")
            Component(device_command_executor, "Device Command Executor", "Обработка команд из Kafka и отправка на устройства")
        }


        Container_Boundary(message_queue, "Kafka", "Шина данных для обмена сообщениями") {
            Component(kafka_device_command, "device-command", "Топик команд для устройств")
            Component(kafka_device_response, "device-response", "Топик ответов от устройств")
            Component(kafka_telemetry_data, "device-telemetry", "Топик для данных телеметрии")
        }
    }

    Container(user_interaction, "Smart House Web Site", "Пользовательский интерфейс для управления умным домом")
}

Rel(user, user_interaction, "Управляет устройствами, просмотр телеметрии")
Rel(user_interaction, api_gateway, "Отправка запросов на управление устройствами")

' Маршрутизация запросов через API Gateway
Rel(api_gateway, dm_api, "Регистрация, команды и управление устройствами")
Rel(api_gateway, telemetry_api, "Запрос данных телеметрии")
Rel(api_gateway, automation_service, "Создание и управление сценариями")

' Взаимодействие с шиной сообщений Kafka для асинхронного обмена данными
Rel_Write(dm_service, kafka_device_command, "Команды")
Rel_Read(dm_service, kafka_device_response, "Результаты команд")

Rel_Write(automation_service, kafka_device_command, "Команды")
Rel_Read(automation_service, kafka_device_response, "Результаты команд")
Rel_Read(automation_service, kafka_telemetry_data, "Телеметрия")

Rel_Write(device_telemetry_collector, kafka_telemetry_data, "Телеметрия")
Rel_Write(device_command_executor, kafka_device_response, "Результаты команд")
Rel_Read(device_command_executor, kafka_device_command, "Команды")

Rel_Read(telemetry_consumer, kafka_telemetry_data, "Телеметрия")

Rel(sensor, device_telemetry_collector, "Приём телеметрии через протоколы (например, MQTT, HTTP)")
Rel(device_command_executor, sensor, "Команды на устройства через различные протоколы")

@enduml
